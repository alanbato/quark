def bigger(x: Int, list: [Int]) -> [Int] {
  (list = []) {
    [];
  }
  (head(list) > x) {
    append([head(list)], bigger(x, tail(list)));
  }
  default {
    bigger(x, tail(list));
  }
}

def smaller(x: Int, list: [Int]) -> [Int] {
  (list = []) {
    [];
  }
  (head(list) < x) {
    append([head(list)], smaller(x, tail(list)));
  }
  default {
    smaller(x, tail(list));
  }
}

def quicksort(list: [Int]) -> [Int] {
  (list = []) {
    [];
  }
  default {
    Int first <- head(list);
    [Int] lower <- smaller(first, tail(list));
    [Int] greater <- bigger(first, tail(list));
    [Int] first_list <- [first];
    append(append(quicksort(lower), first_list), quicksort(greater));
  }
}

[Int] sorted <- [3,2,1,6,4,5,7,9,8,0];
print(quicksort(sorted));
